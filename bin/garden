#!/bin/bash

GARDEN_DIR="$HOME/garden"
FLOWERS_DIR="$GARDEN_DIR/seeds"
SEEDS_FILE="$GARDEN_DIR/seeds"
BIN_DIR="$GARDEN_DIR/bin"

# Ensure necessary directories exist
mkdir -p "$GARDEN_DIR" "$BIN_DIR"

# Function to expand a tilde (~) to the full home directory path
# TODO: add support for files outsid garden
expand_path() {
    echo "$1" | sed "s|^~|$HOME|"
}

# Function to compress full home directory path to ~
compress_path() {
    echo "$1" | sed "s|^$HOME|~|"
}

# Function to ensure sudo permissions if required
check_sudo() {
    if [ "$EUID" -ne 0 ]; then
        echo "This action may require sudo permissions. Please re-run as sudo if needed."
        exit 1
    fi
}

seed() {
    local path="$1"
    local to="$2"
    local abs_path
    abs_path=$(readlink -f "$(expand_path "$path")")
    local target="$GARDEN_DIR/${to:-$(basename "$path")}"
    local orig_path=$(compress_path "$abs_path")

    # Check if the file exists
    if [ ! -e "$path" ]; then
        echo "$path does not exist. Would you like to create it? (y/n)"
        read -r create
        if [ "$create" != "y" ]; then
            echo "Aborting."
            exit 1
        fi
        touch "$path"
    fi

    # Check if file is already seeded in the `seeds` file
    if grep -q "|$orig_path" "$SEEDS_FILE"; then
        echo "File already seeded at $orig_path. Updating symlink."
        ln -sf "$target" "$path"
        return
    fi

    # Handle when the absolute path is already listed in the `seeds` file
    # and there's a valid target path specified in `to`
    if grep -q "^$(realpath --relative-to="$GARDEN_DIR" "$abs_path")|" "$SEEDS_FILE" && [ -n "$to" ]; then
        echo "Moving the file from $abs_path to $target."

        # Ensure the target directory exists
        mkdir -p "$(dirname "$target")"

        # Move the file to the new target location
        mv "$abs_path" "$target"

        # Extract the second column (original path) from the seeds file
        local link_path
        link_path=$(grep "^$(realpath --relative-to="$GARDEN_DIR" "$abs_path")|" "$SEEDS_FILE" | cut -d'|' -f2)

        echo "$link_path"
        echo "$target"

        # Update the symlink
        ln -sf "$target" $(expand_path "$link_path")

        # Update the SEEDS_FILE by replacing the old path with the new one
        sed -i "s|^$(realpath --relative-to="$GARDEN_DIR" "$abs_path")|$(realpath --relative-to="$GARDEN_DIR" "$target")|g" "$SEEDS_FILE"

        echo "Updated symlink and moved the file."
        return
    fi

    # Move the file to the garden or specified path, create symlink, and update seeds
    mkdir -p "$(dirname "$target")"
    mv "$abs_path" "$target"
    ln -s "$target" "$path"
    echo "$(realpath --relative-to="$GARDEN_DIR" "$target")|$orig_path" >> "$SEEDS_FILE"
    echo "Seeded $path to $target"
}


# Function to handle `garden remove`
remove() {
    local path
    path=$(compress_path "$(expand_path "$1")")
    local entry
    entry=$(grep "$path|" "$SEEDS_FILE")

    if [ -z "$entry" ]; then
        echo "File not found in seeds."
        exit 1
    fi

    local file="${entry%%|*}"
    local orig="${entry##*|}"

    # Remove symlink and garden file
    rm -f "$(expand_path "$orig")" "$GARDEN_DIR/$file"
    sed -i "\|$path|d" "$SEEDS_FILE"
    echo "Removed $path and its entry from seeds."
}

# Function to handle `garden grow`
grow() {
    chmod +x "$BIN_DIR"/*
    echo "Growing garden..."
    while IFS='|' read -r file orig; do
        local target="$GARDEN_DIR/$file"
        local orig_expanded
        orig_expanded=$(expand_path "$orig")

        echo "$orig_expanded -> $target"

        if [ -e "$target" ] && [ -L "$orig_expanded" ] && [ "$(readlink -f "$orig_expanded")" = "$target" ]; then
            continue
        fi

        if [ -e "$target" ] && [ ! -L "$orig_expanded" ]; then
            echo "Fixing symlink for $orig_expanded"
            mkdir -p "$(dirname "$orig_expanded")"
            ln -sf "$target" "$orig_expanded"
        elif [ -e "$target" ]; then
            echo "Recreating symlink for $orig_expanded"
            mkdir -p "$(dirname "$orig_expanded")"
            ln -sf "$target" "$orig_expanded"
        else
            echo "File $target not found. Removing entry."
            sed -i "\|$file|d" "$SEEDS_FILE"
        fi
    done <"$SEEDS_FILE"

    echo "Garden has grown."
}

# Function to handle `garden list`
list() {
    cat "$SEEDS_FILE" | column -t -s '|'
}

# Function to handle `garden edit`
edit() {
    local prompt="$1"
    if [ -z "$prompt" ]; then
        echo "Please provide a search term for edit."
        exit 1
    fi

    # Use `fd` to search for files
    local results
    results=$(fd --type f  "$prompt" "$GARDEN_DIR")

    if [ -z "$results" ]; then
        echo "No files found for: $prompt"
        exit 1
    fi

    # Convert results into an array
    IFS=$'\n' read -r -d '' -a files <<<"$results" || true

    if [ "${#files[@]}" -eq 1 ]; then
        # Open the single file with nvim
        nvim "${files[0]}"
    else
        echo "Multiple files found:"
        for i in "${!files[@]}"; do
            echo "$((i + 1)). $(compress_path "${files[i]}")"
        done

        echo "Enter the number of the file you want to open:"
        read -r choice

        if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#files[@]}" ]; then
            nvim "${files[$((choice - 1))]}"
        else
            echo "Invalid choice. Exiting."
            exit 1
        fi
    fi
}

# Main command handler
case "$1" in
seed)
    seed "$2" "$3"
    ;;
remove)
    remove "$2"
    ;;
grow)
    grow
    ;;
list)
    list
    ;;
edit)
    edit "$2"
    ;;
*)
    echo "Usage: garden <command> [options]"
    echo "Commands:"
    echo "  seed <path> [to]    - Seed a file into the garden."
    echo "  remove <path>       - Remove a file and its entry from the garden."
    echo "  grow                - Regrow symlinks and clean the garden."
    echo "  list                - List all garden entries."
    echo "  edit <prompt>       - Search and edit a file by prompt."
    exit 1
    ;;
esac
